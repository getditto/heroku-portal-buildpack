#!/bin/bash

# Find all the directories we might need (based on
# heroku-buildpack-nodejs code).
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

VERSION=stable

# Default build flags to pass to `cargo build`.
RUST_CARGO_BUILD_FLAGS="--release"

SERVER_DIR="$BUILD_DIR/portal_server"

# Load our toolchain configuration, if any was specified.
if [ -f "$SERVER_DIR/rust-toolchain" ]; then
    VERSION="$(cat "$SERVER_DIR/rust-toolchain")"
fi

set -e

# Check our configuration options.
if [ -z ${VERSION+x} ]; then
  >&2 echo "failed: must set VERSION with rust-toolchain to indicate the Rust version."
  exit 1
fi

# Record our Rust build environment configuration in an export file, in
# case another buildpack needs it to build Ruby gems that use Rust or
# something like that.
cat <<EOF > $BP_DIR/export
# Our rustup installation.
export RUSTUP_HOME="$CACHE_DIR/multirust"

# Our cargo installation.  We implicitly trust Rustup and Cargo
# to do the right thing when new versions are released.
export CARGO_HOME="$CACHE_DIR/cargo"

# Include binaries installed by cargo and rustup in our path.
PATH="\$CARGO_HOME/bin:\$PATH"
EOF


# Read our build environment back in and evaluate it so that we can use it.
. $BP_DIR/export

# Switch to our cache directory.
mkdir -p "$CACHE_DIR"
cd "$CACHE_DIR"

# Make sure we have an appropriate Rust toolchain installed.
if [ -d "$CARGO_HOME" ]; then
    echo "-----> Checking for new releases of Rust $VERSION channel"
    # It's possible that $VERSION has changed, or the `stable` channel has updated.
    rustup self update
    rustup update "$VERSION"
    rustup default "$VERSION"
else
    echo "-----> Downloading rustup"
    curl https://sh.rustup.rs -sSf > rustup.sh
    chmod u+x rustup.sh
    echo "-----> Using rustup to install Rust channel $VERSION"
    ./rustup.sh -y --default-toolchain "$VERSION"
    rm rustup.sh
fi
if [ ! -x "$CARGO_HOME/bin/rustc" ]; then
  echo "failed: Cannot find Rust binaries at $CARGO_HOME"
  exit 1
fi

# This is where we will cache our Rust output.  Note the suggestions at
# https://github.com/alexcrichton/cargo/commit/014765f788ca1c2476936835ca32cc2746f99b42
# which describe how this needs to be named.
export CARGO_TARGET_DIR="$CACHE_DIR/target"

# Build our project (into CARGO_TARGET_DIR so we have caching) and copy it
# back to the source tree. 
# To debug git issues:
#export RUST_LOG="cargo::sources::git=debug"
# To debug compiler and linking issues, add `--verbose`.
echo "-----> Building application using Cargo"

echo "Environment config file"
cat $SERVER_DIR/www/env-config.js
echo "------------------------"

cd $SERVER_DIR
rm -rf target/
SQLX_OFFLINE=true cargo build $RUST_CARGO_BUILD_FLAGS
mkdir -p target/release
find "$CARGO_TARGET_DIR/release" -maxdepth 1 -type f -executable -exec cp -a -t target/release {} \;
cp -rf www "$CARGO_TARGET_DIR/release"
cp -rf www "$SERVER_DIR/target/release"
cp src/db/organizations.json "$SERVER_DIR/target/release"
cp src/db/organizations.json "$CARGO_TARGET_DIR/release"
echo "-----> Release binaries created"
ls "$SERVER_DIR/target/release"
echo "-----> contents cached at $CARGO_TARGET_DIR"
